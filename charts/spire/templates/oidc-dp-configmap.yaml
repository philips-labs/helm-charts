{{- if eq (.Values.oidc.enabled | toString) "true" }}
{{- $oidcSocket := "/run/spire/oidc-sockets/spire-oidc-server.sock" }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "spire.fullname" . }}-oidc-discovery-provider
  namespace: {{ .Release.Namespace }}
data:
  oidc-discovery-provider.conf: |
    log_level = "{{ .Values.oidc.config.logLevel }}"

    domains = [
      "spire-oidc.{{ .Release.Namespace }}",
      "spire-oidc.{{ .Release.Namespace }}.svc.cluster.local",
    {{- if gt (len .Values.oidc.config.domains) 0 }}
      "{{- join "\",\n      \"" .Values.oidc.config.domains }}"
    {{- end }}
    ]

    {{- if .Values.oidc.insecureScheme.enabled }}
    allow_insecure_scheme = {{ .Values.oidc.insecureScheme.enabled }}
    listen_socket_path = {{ $oidcSocket | quote }}
    {{- else }}
    acme {
      directory_url = "{{ .Values.oidc.config.acme.directoryUrl }}"
      cache_dir = "{{ .Values.oidc.config.acme.cacheDir }}"
      tos_accepted = {{ .Values.oidc.config.acme.tosAccepted }}
      email = "{{ .Values.oidc.config.acme.emailAddress }}"
    }
    {{- end }}
    listen_socket_path = "/run/spire/oidc-sockets/oidc-server.sock"

    workload_api {
      socket_path = "/spiffe-workload-api/{{ splitList "/" .Values.agent.config.socketPath | last }}"
      trust_domain = "{{ .Values.spire.trustDomain }}"
    }

    health_checks {
      bind_port = "8008"
      ready_path = "/ready"
      live_path = "/live"
    }
  {{- if .Values.oidc.insecureScheme.enabled }}
  default.conf.template: |
    upstream oidc {
      server unix:{{ $oidcSocket }};
    }

    server {
      listen            80;
      listen       [::]:80;

      location / {
        proxy_pass http://oidc;
        proxy_set_header Host $host;
      }
    }
  {{- else }}
  default.conf.template: |
    upstream oidc {
      server unix:/run/spire/oidc-sockets/oidc-server.sock;
    }

    server {
      listen            80 default_server;
      listen       [::]:80 default_server;

      server_name _;

      return 301 https://$host$request_uri;
    }

    server {
      listen            443 ssl;
      listen       [::]:443 ssl;

      ssl_certificate       /etc/certs/cert.pem;
      ssl_certificate_key   /etc/certs/key.pem;

      location / {
        proxy_pass http://oidc;
        proxy_set_header Host $host;
      }
    }
  {{- end }}
{{ end }}
